ORM

Object-Relational Mapping — технология программирования, которая связывает базы данных с концепциями объектно-ориентированных языков программирования, создавая «виртуальную объектную базу данных». ORM — фреймворк для данных. С помощью него описываются сущности и их связи, определяется то, как сущность отображается на базу данных.

Паттерн Active Record

Шаблон проектирования представляет запись из базы данных в виде объекта. Главная особенность — простота использования, так как колонки в базе данных являются полями объекта и легко понять что с ними нужно делать.

Ассоциации в моделях

Со связями Active Record можно упростить операции, декларативно сказав Rails, что имеется соединение между двумя моделями.

Rails поддерживает шесть типов связей:
- belongs_to (устанавливает соединение один-к-одному с другой моделью, когда один экземпляр объявляющей модели "принадлежит" одному экземпляру другой модели)
- has_one (показывает, что у другой модели есть ссылка на эту модель)
- has_many (указывает на соединение один-ко-многим с другой моделью, связь указывает на то, что каждый экземпляр модели имеет ноль или более экземпляров другой модели)
- has_many :through (часто используется для настройки соединения многие-ко-многим с другой моделью. Эта связь указывает, что объявляющая модель может соответствовать нулю или более экземплярам другой модели *через* третью модель.)
- has_one :through (настраивает соединение один-к-одному с другой моделью. Эта связь показывает, что объявляющая модель может быть связана с одним экземпляром другой модели *через* третью модель)
- has_and_belongs_to_many (создает прямое соединение многие-ко-многим с другой моделью, без промежуточной модели)

Миграции, schema.rb

Миграции - это удобный способ изменять схему базы данных всё время последовательным образом. 
Схема изначально ничего не содержит, а каждая миграция модифицирует ее, добавляя или убирая таблицы, столбцы или записи. Active Record обновляет схему со временем, перенося ее из определенной точки в прошлом в последнюю версию. 
Active Record также обновляет файл db/schema.rb, чтобы он соответствовал текущей структуре вашей базы данных.

Уровни валидации

Обычно используются четыре уровня валидации:
- На клиенте (client)
- На контроллере (controller)
- На слое данных (AR)
- База данных (database)

Колбэки

Колбэки это методы, которые вызываются в определенные моменты жизненного цикла объекта. С колбэками возможно написать код, который будет запущен, когда объект Active Record создается, сохраняется, обновляется, удаляется, проходит валидацию или загружается из базы данных.

Создание объекта
- [before_validation]
- [after_validation]
- [before_save]
- [around_save]
- [before_create]
- [around_create]
- [after_create]
- [after_save]
- [after_commit]/[after_rollback]

Обновление объекта
- [before_validation]
- [after_validation]
- [before_save]
- [around_save]
- [before_update]
- [around_update]
- [after_update]
- [after_save]
- [after_commit] / [after_rollback]

Уничтожение объекта
- [before_destroy]
- [around_destroy]
- [after_destroy]
- [after_commit] / [after_rollback]

N+1 проблема

Проблема N+1 возникает, когда мы генерируем запрос на получение одной сущности из базы данных, но у данной сущности есть свои связанные сущности, которые мы тоже хотим получить и hibernate генерирует вначале один запрос к базе данных, чтобы получить интересующую нас сущность, а потом N запросов, чтобы достать из базы данных связанные сущности. Данная проблема отражается отрицательно на производительности работы базы данных из-за большого числа обращений к ней.
Решение: заранее включить связанные сущности посредством методов .includes или .eager_load
